// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  fullName    String    @map("full_name")
  phoneNumber String    @map("phone_number")
  address     String?
  dob         DateTime?
  role        Int //Staff, Customer, Driver
  status      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  staff    Staff?
  driver   Driver?
  customer Customer?

  @@map(name: "users")
}

model Staff {
  id      Int    @id @default(autoincrement())
  title   String @db.VarChar(255)
  staffNo String @map("staff_no") @db.VarChar(255)

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], map: "fk_user_staff")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "staffs")
}

model Customer {
  id         Int    @id @default(autoincrement())
  level      String @db.VarChar(255)
  customerNo String @map("customer_no") @db.VarChar(255)

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], map: "fk_user_customer")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "customers")
}

model Driver {
  id          Int    @id @default(autoincrement())
  bookingType Int    @map("booking_type") // Premium: 1, Basic:
  driverNo    String @map("driver_no") @db.VarChar(255)

  vehicleType Int @map("vehicle_type") // FOUR_SEAT: 1, FIVE_SEAT: 2, SEVEN_SEAT: 3, LUXURY: 4
  userId       Int                 @unique @map("user_id")
  user         User                @relation(fields: [userId], references: [id], map: "fk_user_driver")
  license      License?
  vehicle      Vehicle?
  onlineSession DriverOnlineSession?

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map(name: "drivers")
}

model License {
  id            Int      @id @default(autoincrement())
  class         String   @db.VarChar(255)
  issuedDate    DateTime @map("issued_date")
  expiredDate   DateTime @map("expired_date")
  licenseNumber String   @map("license_number")

  driverId Int    @unique @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [id], map: "fk_driver_license")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "licenses")
}

model Vehicle {
  id           Int     @id @default(autoincrement())
  model        String? @db.VarChar(255)
  licensePlate String? @map("license_plate")

  driverId Int    @unique @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [id], map: "fk_driver_vehicle")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "vehicles")
}

model DriverOnlineSession {
  id               Int     @id @default(autoincrement())
  driverId         Int     @unique() @map("driver_id")
  currentLongitude Decimal @db.Decimal(11,8) @map("current_longitude")
  currentLatitude  Decimal @db.Decimal(10,8) @map("current_latitude")
  onlineStatus    Int     @map("online_status")
  workingStatus   Int     @map("working_status")

  driver Driver @relation(fields: [driverId], references: [id], map: "fk_driver_onl_session_vehicle")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "driver_online_session")
}
